def draw_paths(flights):
    paths_tree = {}
    for flight in flights:
        try:
            paths_tree[str(flight[0])] += [flight[1:]]
        except:
            paths_tree[str(flight[0])] = [flight[1:]]
    return paths_tree


class Solution:
    def findCheapestPrice(self, n, flights, src, dst, K):
        tree = draw_paths(flights)
        print(tree)
        cheapest = 1000 ** 1000
        def _recur(node, price, k):
            print("node ", node)
            try:
                for i in tree[str(node)]:
                    print("child : ", i[0])
                    print("k=", k)
                    if k > K:
                        continue
                    if i[0] == dst:
                        total = price + i[1]
                        nonlocal cheapest
                        if total <= cheapest:
                            cheapest = total
                    else:
                        _recur(str(i[0]), price + i[1], k + 1)
            except:
                pass

        _recur(src, 0, 0)
        return cheapest if (cheapest < 1000 ** 1000) else -1

print(draw_paths([]))
s = Solution()
print(s.findCheapestPrice(17, [], 13, 4, 13))


A = {
    '0': [[12, 28], [8, 57], [15, 48], [10, 76]],
    '5': [[6, 39], [14, 89], [13, 5], [16, 64], [10, 46], [9, 77], [7, 77]],
    '8': [[6, 59], [10, 34], [11, 31], [9, 14], [2, 26], [13, 80], [3, 28]],
    '13': [[15, 7], [12, 38], [6, 29], [16, 11], [0, 65], [5, 77], [11, 64], [7, 50], [8, 43]],
    '10': [[12, 35], [2, 38], [15, 19], [11, 85], [5, 95], [4, 86], [9, 99], [0, 43], [7, 78]],
    '15': [[3, 23], [0, 22], [6, 78], [13, 98], [12, 71], [11, 57], [14, 70], [2, 77]],
    '7': [[11, 26], [3, 46], [1, 29], [14, 100], [0, 83], [12, 64], [2, 11]],
    '9': [[4, 65], [6, 74], [1, 3], [12, 10], [7, 35], [10, 49], [15, 94], [5, 41]],
    '4': [[7, 7], [9, 77], [8, 73], [5, 65], [11, 19], [10, 18]], '14': [[15, 31], [1, 90], [9, 58], [7, 74], [11, 85], [6, 84]],
    '2': [[12, 44], [0, 12], [11, 60], [5, 49], [13, 6], [10, 39], [7, 49]],
    '11': [[16, 13], [1, 73], [0, 37], [2, 74], [6, 75], [9, 28]],
    '12': [[4, 58], [3, 19], [14, 48], [13, 77], [9, 92], [0, 13], [16, 87], [6, 24]],
    '16': [[4, 76], [12, 13], [1, 14], [3, 47], [8, 3], [11, 100], [9, 42], [14, 52]],
    '3': [[4, 17], [12, 38], [5, 100], [6, 65], [7, 87], [10, 80]],
    '1': [[11, 30], [4, 28], [3, 45], [7, 7]],
    '6': [[14, 68], [10, 20], [2, 33], [12, 74]]}
